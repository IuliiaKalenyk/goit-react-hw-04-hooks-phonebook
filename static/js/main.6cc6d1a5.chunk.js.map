{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","App.js","index.js"],"names":["FormInput","styled","input","FormBtn","button","Form","state","name","number","nameInputId","shortid","generate","numInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","placeholder","id","type","pattern","title","required","onChange","Component","List","ul","Item","li","Button","ContactList","contacts","onDeleteContact","map","onClick","Input","Label","label","Filter","Wrapper","section","Title","h2","Section","children","StyledContainer","Container","App","useState","JSON","parse","localStorage","getItem","setContacts","filter","setFilter","firstUse","useRef","useEffect","current","parsedContacts","setItem","stringify","contact","uuidv4","some","alert","normalizedFilter","toLowerCase","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cc6d1a5.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const FormInput = styled.input`\r\n  color: rgb(5, 5, 5);\r\n  padding: 3px;\r\n  font-size: 18px;\r\n  background-color: ffffff;\r\n  border-radius: 3px;\r\n  margin: 5px;\r\n`;\r\nexport const FormBtn = styled.button`\r\n  color: rgb(10, 121, 121);\r\n  font-weight: 600;\r\n  border-radius: 20px;\r\n  height: auto;\r\n padding: 6px;\r\n  margin-left: 15px;\r\n  border: 2px solid rgb(58, 230, 58);\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  &:hover,\r\n  &:focus {\r\n  color: rgb(250, 244, 243);\r\n  background-color: rgb(58, 230, 58);\r\n  font-weight: 600;\r\n  transform: scale(1.1);\r\n  border: 2px solid rgb(12, 231, 213);\r\n  }\r\n`;\r\n","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport {FormInput, FormBtn} from './ContactForm.styled';\r\n\r\nexport default class Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  nameInputId = shortid.generate();\r\n  numInputId = shortid.generate();\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            <FormInput\r\n              placeholder=\"Name\"\r\n              id={this.nameInputId}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n\r\n          <label htmlFor={this.numInputId}>\r\n            <FormInput\r\n              placeholder=\"Tel\"\r\n              id={this.numInputId}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <FormBtn type=\"submit\">\r\n            Add contact\r\n          </FormBtn>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}","import styled from \"@emotion/styled\";\r\n\r\nexport const List = styled.ul`\r\n  border-radius: 4px;\r\n  padding:0;\r\n  /* overflow: hidden */;\r\n`;\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  padding: 10px 5px;\r\n  border-bottom: 1px solid rosybrown;\r\n  & span {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    font-weight: 600;\r\n    color:  rgb(10, 121, 121);\r\n    &:first-of-type {\r\n      color: #070707;\r\n      margin-right: 10px;\r\n    }\r\n}\r\n`;\r\nexport const Button = styled.button`\r\n  color: rgb(10, 121, 121);\r\n  font-weight: 600;\r\n  border-radius: 20px;\r\n  height: auto;\r\n padding: 6px;\r\n  margin-left: auto;\r\n  border: 2px solid rgb(58, 230, 58);\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: rgb(250, 244, 243);\r\n  background-color: rgb(58, 230, 58);\r\n  font-weight: 600;\r\n  transform: scale(1.1);\r\n  border: 2px solid rgb(12, 231, 213);\r\n  }\r\n`;","import PropTypes from \"prop-types\";\r\nimport { List, Item, Button } from \"./ContactList.styled\";\r\n\r\nexport const ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <List>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <Item key={id}>\r\n            <span>\r\n              {name}:\r\n            </span>\r\n            <span>{number}</span>\r\n            <Button\r\n              onClick={() => {\r\n                onDeleteContact(id);\r\n              }}\r\n            >Delete</Button>\r\n          </Item>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};","import styled from \"@emotion/styled\";\r\n\r\n\r\nexport const Input = styled.input`\r\n  color: rgb(5, 5, 5);\r\n  font-size: 18px;\r\n  margin: 0 auto;\r\n  padding: 3px;\r\n  border-radius: 2px;\r\n  background-color: #ffffff;\r\n  display: block;\r\n  border-radius: 3px;\r\n  transition: all 0.3s;\r\n  `;\r\n\r\nexport const Label = styled.label`\r\n  /* position: absolute;\r\n  left: 0;\r\n  bottom: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n  cursor: text;\r\n  font-size: 20px;\r\n  color: tan;\r\n  transition: color 250ms ease-in-out, transform 250ms ease-in-out; */\r\n  `;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { Label, Input} from './Filter.styled';\r\n\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <Label>\r\n    <Input\r\n      placeholder=\"Find contacts by name\"\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </Label>\r\n);\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};","import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.section`\r\n  /* width: 800px;\r\n  margin: 50px auto;\r\n  padding: 30px;\r\n  border-radius: 5px;\r\n  box-shadow: rgba(0, 0, 0, 0.5) 0 0 10px 5px;\r\n  background-color: #fff; */\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  margin-bottom: 50px;\r\n  margin-left: 0;\r\n  margin-right: 0;\r\n  text-transform: uppercase;\r\n  font-size: 32px;\r\n  text-align: center;\r\n  \r\n`;","import PropTypes from \"prop-types\";\r\nimport { Wrapper, Title } from \"./Section.styled\";\r\n\r\nexport const Section = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      {title && <Title>{title}</Title>}\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const StyledContainer = styled.div`\r\n  width: 800px;\r\n  margin: 50px auto;\r\n  padding: 30px;\r\n  border-radius: 5px;\r\n  box-shadow: rgba(0, 0, 0, 0.5) 0 0 10px 5px;\r\n  background-color: var(--color-bg);\r\n  & h1,\r\n  h2 {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: var(--color-dark);\r\n    & svg {\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n  & h1 {\r\n    font-size: 40px;\r\n    margin-bottom: 40px;\r\n  }\r\n  & h2 {\r\n    font-size: 28px;\r\n    margin-bottom: 60px;\r\n  }\r\n`;","import PropTypes from \"prop-types\";\r\nimport { StyledContainer } from \"./Container.styled\";\r\n\r\nexport const Container = ({ children }) => {\r\n  return <StyledContainer>{children}</StyledContainer>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};","import React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport { Section } from './components/Section/Section';\nimport { Container } from './components/Container/Container';\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? ContactList;\n  });\n  const [filter, setFilter] = useState('');\n  const firstUse = useRef(true);\n\n  useEffect(() => {\n    if (firstUse.current) {\n      const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n      if (parsedContacts) {\n        setContacts(parsedContacts);\n      }\n\n      firstUse.current = false;\n      return;\n    }\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandle = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} already in the contacts.`);\n      return;\n    }\n\n    setContacts(contacts => [contact, ...contacts]);\n  };\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div>\n      <Section>\n        <Container>\n          <h1>Phonebook</h1>\n          <ContactForm onSubmit={formSubmitHandle} />\n\n          <h2>Contacts</h2>\n          <Filter value={filter} onChange={changeFilter} />\n          <ContactList\n            contacts={getVisibleContacts()}\n            onDeleteContact={deleteContact}\n          />\n        </Container>\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}